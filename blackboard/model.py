import re
import pandas as pd
import json
from io import StringIO
from datetime import datetime, timedelta
from blackboard.utility import *

import flask
from blackboard import app
import blackboard.update as update

from flask_apscheduler import APScheduler

class Model(metaclass=Singleton):
    def __init__(self):
        self.output = {'Quiz 4': {'Tut 06': [4.0, 5.0, 7.0, 7.0, 8.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 03': [7.0, 7.0, 7.0, 7.0, 8.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 01': [1.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0], 'Tut 05': [4.0, 6.0, 7.0, 7.0, 7.0, 7.5, 7.5, 8.0, 8.5, 9.0, 9.0, 9.0, 9.0, 9.5, 9.5], 'Tut 10': [4.0, 4.0, 4.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 02': [4.0, 7.5, 8.0, 8.0, 8.0, 8.5, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 12': [7.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 09': [5.0, 6.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 07': [6.0, 6.0, 7.0, 7.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 11': [6.0, 6.0, 6.5, 7.0, 7.0, 7.0, 7.5, 8.0, 8.0, 8.5, 8.5, 8.5, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.5, 10.0], 'Tut 08': [5.0, 5.5, 6.0, 6.0, 6.0, 6.5, 7.0, 7.0, 7.5, 7.5, 8.0, 8.0, 8.0, 8.5, 8.5, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 04': [5.0, 5.0, 5.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]}, 'Quiz 1': {'Tut 06': [8.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 03': [7.0, 8.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 01': [5.5, 6.5, 9.0, 9.0, 9.0, 9.0, 9.5, 9.5, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 05': [1.5, 4.5, 5.5, 5.5, 6.5, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.5, 9.5, 10.0, 10.0], 'Tut 10': [6.5, 7.0, 7.0, 7.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 02': [2.0, 5.0, 5.5, 7.0, 7.0, 7.5, 8.5, 9.0, 9.0, 9.5, 9.5, 9.5, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 12': [8.0, 8.0, 8.0, 8.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 09': [7.0, 7.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 07': [8.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 11': [3.0, 4.5, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.5, 9.0, 9.0, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 08': [3.5, 4.5, 4.5, 5.5, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 8.5, 8.5, 8.5, 9.0, 9.0, 9.5, 10.0, 10.0, 10.0, 10.0], 'Tut 04': [6.0, 6.0, 7.0, 8.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]}, 'Quiz 5': {'Tut 06': [5.0, 6.0, 6.0, 6.0, 7.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 03': [6.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 01': None, 'Tut 05': [0.0, 0.5, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.5, 4.0, 4.5, 5.0, 7.0, 8.0], 'Tut 10': None, 'Tut 02': [3.5, 4.5, 4.5, 4.5, 5.0, 5.0, 5.0, 5.0, 5.5, 5.5, 5.5, 5.5, 6.0, 6.5, 6.5, 7.5, 7.5, 9.0], 'Tut 12': [3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 8.0, 8.0, 10.0, 10.0, 10.0], 'Tut 09': [4.0, 5.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0], 'Tut 07': [3.0, 3.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 10.0, 10.0, 10.0, 10.0], 'Tut 11': None, 'Tut 08': [3.5, 4.0, 5.0, 6.0, 6.5, 7.0, 7.0, 7.0, 7.5, 7.5, 7.5, 8.0, 8.5, 8.5, 9.5, 9.5, 9.5, 10.0, 10.0], 'Tut 04': [5.0, 5.0, 6.0, 6.0, 6.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0]}, 'Test 1': {'Tut 06': [35.0, 40.0, 46.0, 50.0, 51.0, 53.0, 53.0, 55.0, 55.0, 56.0, 57.0, 58.0, 59.0, 61.0, 62.0, 64.0, 64.0, 75.0, 77.0, 77.0, 78.0, 78.0], 'Tut 03': [42.0, 46.0, 50.0, 51.0, 55.0, 59.0, 61.0, 61.0, 62.0, 62.0, 63.0, 65.0, 69.0, 71.0, 75.0, 81.0, 90.0], 'Tut 01': [29.0, 42.0, 46.0, 51.0, 51.0, 51.0, 52.0, 53.0, 55.0, 55.5, 57.5, 58.5, 64.0, 65.0, 67.5, 69.0, 70.0, 73.0, 77.0, 79.0, 81.0], 'Tut 05': [26.5, 42.5, 49.5, 52.5, 53.0, 53.0, 63.0, 66.0, 67.5, 67.5, 69.0, 72.5, 73.0, 73.5, 76.0, 85.0], 'Tut 10': [39.0, 46.0, 46.0, 49.0, 50.0, 54.5, 57.5, 58.0, 58.0, 59.0, 59.0, 63.5, 65.0, 66.0, 75.0, 77.0, 78.0, 79.0, 80.0, 82.0, 95.0], 'Tut 02': [31.0, 39.5, 42.0, 51.0, 55.5, 55.5, 58.0, 58.0, 58.5, 62.0, 67.0, 68.5, 69.0, 74.0, 75.0, 76.5, 82.5, 87.0], 'Tut 12': [52.0, 55.0, 57.0, 57.0, 62.0, 64.0, 68.0, 68.0, 70.0, 71.0, 71.0, 72.0, 74.0, 74.0, 77.0, 79.0, 79.0, 81.0, 83.0, 85.0], 'Tut 09': [33.0, 49.0, 51.0, 52.0, 54.0, 56.0, 58.0, 60.0, 64.0, 64.0, 64.0, 65.0, 66.0, 75.0, 75.0, 76.0, 77.0, 77.0, 96.0], 'Tut 07': [41.0, 57.0, 58.0, 60.0, 66.0, 66.0, 69.0, 69.0, 71.0, 71.0, 72.0, 73.0, 73.0, 74.0, 74.0, 75.0, 78.0, 79.0, 81.0, 90.0, 91.0], 'Tut 11': [21.0, 28.0, 35.0, 39.5, 40.0, 44.0, 53.0, 53.5, 56.5, 62.5, 64.5, 66.0, 67.0, 69.5, 70.0, 70.5, 74.5, 77.0, 82.0], 'Tut 08': [32.0, 41.5, 47.0, 49.0, 50.0, 54.0, 59.0, 60.0, 60.5, 66.5, 67.0, 72.0, 72.0, 72.5, 74.0, 76.5, 77.5, 78.0, 92.0, 94.0], 'Tut 04': [38.0, 41.0, 44.0, 48.0, 48.0, 48.0, 48.0, 50.0, 54.0, 55.0, 60.0, 61.0, 65.0, 68.0, 70.0, 72.0, 73.0, 85.0, 87.0, 88.0, 89.0]}, 'Quiz 7': {'Tut 06': [5.0, 7.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 03': None, 'Tut 01': None, 'Tut 05': None, 'Tut 10': None, 'Tut 02': None, 'Tut 12': None, 'Tut 09': None, 'Tut 07': [2.0, 2.0, 2.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 8.0, 9.0, 10.0, 10.0], 'Tut 11': None, 'Tut 08': None, 'Tut 04': None}, 'Quiz 2': {'Tut 06': [6.0, 7.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 03': [6.0, 6.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 01': [3.0, 7.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 05': [1.0, 4.5, 5.5, 5.5, 6.0, 6.5, 7.5, 7.5, 8.0, 8.0, 8.0, 8.5, 8.5, 8.5, 9.5, 10.0], 'Tut 10': [7.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 02': [4.0, 5.0, 5.5, 6.5, 8.0, 8.0, 8.5, 8.5, 8.5, 9.0, 9.0, 9.0, 9.0, 9.0, 9.5, 9.5, 10.0, 10.0], 'Tut 12': [7.0, 7.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 09': [5.0, 6.0, 6.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 07': [4.0, 8.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 11': [0.0, 1.5, 2.0, 3.5, 3.5, 4.0, 4.0, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 8.5, 9.0, 9.0, 9.5, 10.0, 10.0, 10.0, 10.0], 'Tut 08': [6.0, 6.5, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 04': [5.0, 7.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]}, 'Quiz 3': {'Tut 06': [5.0, 6.0, 7.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 03': [7.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 01': [0.0, 2.5, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.5, 5.0, 6.0, 6.0, 6.0, 6.5, 6.5, 7.0, 7.0, 8.0, 9.0], 'Tut 05': [4.0, 6.0, 6.5, 6.5, 6.5, 6.5, 7.0, 7.0, 7.5, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.5], 'Tut 10': [4.0, 5.0, 6.0, 6.0, 6.0, 6.5, 7.0, 8.0, 8.0, 8.5, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 02': [3.5, 4.5, 5.0, 5.0, 5.5, 6.5, 7.5, 7.5, 7.5, 8.0, 8.0, 8.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 12': [8.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 09': [7.0, 7.0, 7.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 07': [7.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 11': [2.5, 3.0, 3.5, 4.0, 5.0, 5.0, 5.5, 6.0, 6.0, 6.0, 6.0, 6.5, 6.5, 6.5, 7.0, 7.5, 8.0, 8.0, 8.5], 'Tut 08': [5.0, 5.5, 5.5, 6.0, 6.0, 7.0, 7.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 04': [5.0, 5.0, 6.0, 6.0, 6.0, 7.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]}, 'Quiz 6': {'Tut 06': [5.0, 5.0, 5.0, 6.0, 6.0, 7.0, 7.0, 7.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0], 'Tut 03': [3.0, 5.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 01': None, 'Tut 05': None, 'Tut 10': None, 'Tut 02': [3.0, 3.0, 3.0, 3.5, 5.5, 6.0, 6.0, 6.5, 7.0, 7.5, 9.0, 9.0, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 12': [4.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 09': [2.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 7.0, 7.0, 8.0, 8.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 07': [4.0, 4.0, 6.0, 6.0, 6.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'Tut 11': None, 'Tut 08': [3.0, 4.0, 4.5, 4.5, 5.0, 5.5, 5.5, 5.5, 5.5, 6.0, 6.0, 6.5, 7.0, 7.5, 8.0, 9.0, 9.0, 10.0, 10.0, 10.0], 'Tut 04': [3.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 9.0, 9.0, 9.0, 10.0, 10.0]}}
        #output = self.output
        #for metric, more in output.items():
        #    if "Quiz" in metric and more is not None:
        #        for group, data in more.items():
        #            if data is not None:
        #                for i, val in enumerate(data):
        #                    data[i] = val * 10
        self.json_output = json.dumps(self.output)
        self.info = {'total_points': {'Test 1': 100, 'Quiz 1': 10, 'Quiz 2': 10, 'Quiz 3': 10, 'Quiz 4': 10, 'Quiz 5': 10, 'Quiz 6': 10, 'Quiz 7': 10, 'Quiz 8': 10}}
        self.json_info = json.dumps(self.info)
        #self.update()

    def update(self):
        self.create_with(*update.pull())
        self.timestamp = datetime.now()
        self.transform()

    def create_with(self, grades_raw, group_dict):

        # First, we set up the tables we can make out of grades_raw

        grades_data = pd.read_table(StringIO(grades_raw))
        raw_cols = grades_data.columns
        raw_cols = raw_cols.map(lambda x: x.replace(' ', '_').replace('#', '') if isinstance(x, str) else x)
        grades_data.columns = raw_cols

        student_info, grades_lookup = grades_data[raw_cols[:5]], grades_data[raw_cols[6:]]
        grade_cols = grades_lookup.columns
        # Clean the quiz/test names
        pts_re = re.compile(":_([0-9.]*)]")
        metric_names = grade_cols.map(lambda x: x[:x.index('_[')])
        points_possible = grade_cols.map(lambda x: pts_re.search(x).group(1))
        grades_lookup.columns = metric_names

        metric_info = pd.DataFrame([metric_names, points_possible]).T
        metric_info.columns = ['Metric_Name', 'Points_Possible']

        student_info.index = student_info.Student_ID
        grades_lookup.index = student_info.Student_ID
        metric_info.index = metric_info.Metric_Name

        students = student_info.assign(Full_Name = student_info.First_Name + ' ' + student_info.Last_Name)
        grades = grades_lookup

        # Next, we build more data structures out of group_dict

        student_names = {name: None for name in students.Full_Name}
        teaching_names = {}
        # We must assume that teaching names come up in more than one group
        for group, names in group_dict.items():
            #group = group.replace(' ', '_')
            for name in names:
                if name in student_names:
                    student_names[name] = group
                else:
                    if name not in teaching_names:
                        teaching_names[name] = []
                    teaching_names[name].append(group)
        leader_dict, head_dict = {}, {}
        for name, groups in teaching_names.items():
            if len(groups) > len(group_dict) / 2:
                head_dict[name] = groups
            else:
                leader_dict[name] = groups

        group_info = pd.DataFrame(sorted(group_dict.keys()), columns=["Group_Name"])
        group_info = group_info.assign(Leader_Name="")
        tf = group_info
        for leader, groups in leader_dict.items():
            for group in groups:
                tf.Leader_Name[tf.Group_Name == group] = leader

        group_info.index = group_info.Group_Name
        groups = group_info.assign(Standard=group_info.Leader_Name)
        students = students.assign(Group_Name = students.Full_Name.map(lambda x: student_names[x]))
        metrics = metric_info

        self.data = O(students=students, grades=grades, groups=groups, metrics=metrics)

    def transform(self):
        d = self.data
        table = d.students.join(d.grades)
        table = table.set_index('Group_Name')
        table = table[['Test_1', 'Test_2'] + ['Quiz_' + str(n) for n in range(1, 10)]].stack()
        table = table.groupby(identity).agg(sorted).unstack()
        self.table = table
        
        output = table.to_dict()
        # TOTAL HACKERY FOR MESSED UP CHART LIBRARY that refuses to redraw differently scaled data
        for metric, more in output.items():
            if "Quiz" in metric and more is not None:
                for group, data in more.items():
                    if data is not None:
                        for i, val in enumerate(data):
                            data[i] = val * 10
        # END STUPID
        for metric in list(output):
            grades = output.pop(metric)
            for group in list(grades):
                grades['Tut ' + group[-2:]] = grades.pop(group)
            output[metric.replace('_', ' ')] = grades
        self.output = output

        info = {}
        info['total_points'] = d.metrics["Points_Possible"].to_dict()
        self.info = info

        self.json_output = json.dumps(self.output)
        self.json_info = json.dumps(self.info)

# I have no idea how the scheduler below works but it works
# It's copied right from the examples in Flask-APScheduler

class Config(object):
    JOBS = [
        {
            'id': 'keep_fresh',
            'func': 'blackboard.model:keep_fresh',
            'args': (),
            'trigger': 'interval',
            'hours': 12
        }
    ]

    SCHEDULER_VIEWS_ENABLED = True

def keep_fresh():
    Model().update()

app.config.from_object(Config())

scheduler = APScheduler()
scheduler.init_app(app)
scheduler.start()
